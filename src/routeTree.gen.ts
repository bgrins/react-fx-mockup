/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'
import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SplitViewRouteImport } from './routes/split-view'
import { Route as RedirectRouteImport } from './routes/redirect'
import { Route as PathlessLayoutRouteImport } from './routes/_pathlessLayout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as InferTestIndexRouteImport } from './routes/infer-test/index'
import { Route as InferTestInferTestRouteImport } from './routes/infer-test/_infer-test'
import { ServerRoute as CustomScriptDotjsServerRouteImport } from './routes/customScript[.]js'
import { ServerRoute as ApiUsersServerRouteImport } from './routes/api/users'
import { ServerRoute as ApiProxyServerRouteImport } from './routes/api/proxy'
import { ServerRoute as ApiUsersUserIdServerRouteImport } from './routes/api/users.$userId'
import { ServerRoute as ApiInferV1ChatCompletionsServerRouteImport } from './routes/api/infer/v1/chat/completions'

const InferTestRouteImport = createFileRoute('/infer-test')()
const rootServerRouteImport = createServerRootRoute()

const InferTestRoute = InferTestRouteImport.update({
  id: '/infer-test',
  path: '/infer-test',
  getParentRoute: () => rootRouteImport,
} as any)
const SplitViewRoute = SplitViewRouteImport.update({
  id: '/split-view',
  path: '/split-view',
  getParentRoute: () => rootRouteImport,
} as any)
const RedirectRoute = RedirectRouteImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutRoute = PathlessLayoutRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const InferTestIndexRoute = InferTestIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => InferTestRoute,
} as any)
const InferTestInferTestRoute = InferTestInferTestRouteImport.update({
  id: '/_infer-test',
  getParentRoute: () => InferTestRoute,
} as any)
const CustomScriptDotjsServerRoute = CustomScriptDotjsServerRouteImport.update({
  id: '/customScript.js',
  path: '/customScript.js',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiUsersServerRoute = ApiUsersServerRouteImport.update({
  id: '/api/users',
  path: '/api/users',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiProxyServerRoute = ApiProxyServerRouteImport.update({
  id: '/api/proxy',
  path: '/api/proxy',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiUsersUserIdServerRoute = ApiUsersUserIdServerRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => ApiUsersServerRoute,
} as any)
const ApiInferV1ChatCompletionsServerRoute =
  ApiInferV1ChatCompletionsServerRouteImport.update({
    id: '/api/infer/v1/chat/completions',
    path: '/api/infer/v1/chat/completions',
    getParentRoute: () => rootServerRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/redirect': typeof RedirectRoute
  '/split-view': typeof SplitViewRoute
  '/infer-test': typeof InferTestInferTestRoute
  '/infer-test/': typeof InferTestIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/redirect': typeof RedirectRoute
  '/split-view': typeof SplitViewRoute
  '/infer-test': typeof InferTestIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_pathlessLayout': typeof PathlessLayoutRoute
  '/redirect': typeof RedirectRoute
  '/split-view': typeof SplitViewRoute
  '/infer-test': typeof InferTestRouteWithChildren
  '/infer-test/_infer-test': typeof InferTestInferTestRoute
  '/infer-test/': typeof InferTestIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/redirect' | '/split-view' | '/infer-test' | '/infer-test/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/redirect' | '/split-view' | '/infer-test'
  id:
    | '__root__'
    | '/'
    | '/_pathlessLayout'
    | '/redirect'
    | '/split-view'
    | '/infer-test'
    | '/infer-test/_infer-test'
    | '/infer-test/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PathlessLayoutRoute: typeof PathlessLayoutRoute
  RedirectRoute: typeof RedirectRoute
  SplitViewRoute: typeof SplitViewRoute
  InferTestRoute: typeof InferTestRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/customScript.js': typeof CustomScriptDotjsServerRoute
  '/api/proxy': typeof ApiProxyServerRoute
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
  '/api/infer/v1/chat/completions': typeof ApiInferV1ChatCompletionsServerRoute
}
export interface FileServerRoutesByTo {
  '/customScript.js': typeof CustomScriptDotjsServerRoute
  '/api/proxy': typeof ApiProxyServerRoute
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
  '/api/infer/v1/chat/completions': typeof ApiInferV1ChatCompletionsServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/customScript.js': typeof CustomScriptDotjsServerRoute
  '/api/proxy': typeof ApiProxyServerRoute
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
  '/api/infer/v1/chat/completions': typeof ApiInferV1ChatCompletionsServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/customScript.js'
    | '/api/proxy'
    | '/api/users'
    | '/api/users/$userId'
    | '/api/infer/v1/chat/completions'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/customScript.js'
    | '/api/proxy'
    | '/api/users'
    | '/api/users/$userId'
    | '/api/infer/v1/chat/completions'
  id:
    | '__root__'
    | '/customScript.js'
    | '/api/proxy'
    | '/api/users'
    | '/api/users/$userId'
    | '/api/infer/v1/chat/completions'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  CustomScriptDotjsServerRoute: typeof CustomScriptDotjsServerRoute
  ApiProxyServerRoute: typeof ApiProxyServerRoute
  ApiUsersServerRoute: typeof ApiUsersServerRouteWithChildren
  ApiInferV1ChatCompletionsServerRoute: typeof ApiInferV1ChatCompletionsServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/infer-test': {
      id: '/infer-test'
      path: '/infer-test'
      fullPath: '/infer-test'
      preLoaderRoute: typeof InferTestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/split-view': {
      id: '/split-view'
      path: '/split-view'
      fullPath: '/split-view'
      preLoaderRoute: typeof SplitViewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/infer-test/': {
      id: '/infer-test/'
      path: '/'
      fullPath: '/infer-test/'
      preLoaderRoute: typeof InferTestIndexRouteImport
      parentRoute: typeof InferTestRoute
    }
    '/infer-test/_infer-test': {
      id: '/infer-test/_infer-test'
      path: '/infer-test'
      fullPath: '/infer-test'
      preLoaderRoute: typeof InferTestInferTestRouteImport
      parentRoute: typeof InferTestRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/customScript.js': {
      id: '/customScript.js'
      path: '/customScript.js'
      fullPath: '/customScript.js'
      preLoaderRoute: typeof CustomScriptDotjsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/users': {
      id: '/api/users'
      path: '/api/users'
      fullPath: '/api/users'
      preLoaderRoute: typeof ApiUsersServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/proxy': {
      id: '/api/proxy'
      path: '/api/proxy'
      fullPath: '/api/proxy'
      preLoaderRoute: typeof ApiProxyServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/users/$userId': {
      id: '/api/users/$userId'
      path: '/$userId'
      fullPath: '/api/users/$userId'
      preLoaderRoute: typeof ApiUsersUserIdServerRouteImport
      parentRoute: typeof ApiUsersServerRoute
    }
    '/api/infer/v1/chat/completions': {
      id: '/api/infer/v1/chat/completions'
      path: '/api/infer/v1/chat/completions'
      fullPath: '/api/infer/v1/chat/completions'
      preLoaderRoute: typeof ApiInferV1ChatCompletionsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface InferTestRouteChildren {
  InferTestInferTestRoute: typeof InferTestInferTestRoute
  InferTestIndexRoute: typeof InferTestIndexRoute
}

const InferTestRouteChildren: InferTestRouteChildren = {
  InferTestInferTestRoute: InferTestInferTestRoute,
  InferTestIndexRoute: InferTestIndexRoute,
}

const InferTestRouteWithChildren = InferTestRoute._addFileChildren(
  InferTestRouteChildren,
)

interface ApiUsersServerRouteChildren {
  ApiUsersUserIdServerRoute: typeof ApiUsersUserIdServerRoute
}

const ApiUsersServerRouteChildren: ApiUsersServerRouteChildren = {
  ApiUsersUserIdServerRoute: ApiUsersUserIdServerRoute,
}

const ApiUsersServerRouteWithChildren = ApiUsersServerRoute._addFileChildren(
  ApiUsersServerRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PathlessLayoutRoute: PathlessLayoutRoute,
  RedirectRoute: RedirectRoute,
  SplitViewRoute: SplitViewRoute,
  InferTestRoute: InferTestRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  CustomScriptDotjsServerRoute: CustomScriptDotjsServerRoute,
  ApiProxyServerRoute: ApiProxyServerRoute,
  ApiUsersServerRoute: ApiUsersServerRouteWithChildren,
  ApiInferV1ChatCompletionsServerRoute: ApiInferV1ChatCompletionsServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
